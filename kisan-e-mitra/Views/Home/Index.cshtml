@{
    ViewBag.Title = Resources.Resource.label_title;
    var welcomeNoteGreetingBase64 = ViewBag.AudioBase64Strings[0];
    var languageChangeGreetingBase64 = ViewBag.AudioBase64Strings[1];
    var resendOtpTranslation = Resources.Resource.message_resend_otp;
}

@Html.Hidden("welcome-greeting-message-base64", (object)welcomeNoteGreetingBase64.ToString())
@Html.Hidden("language-change-greeting-message-base64", (object)languageChangeGreetingBase64.ToString())
@Html.Hidden("resend-otp-translation", (object)resendOtpTranslation.ToString())
<div class="chat-container">
    <div id="message-list" class="message-list">
        <div id="welcome-message" class="system-msg-left message left chatbot-message-wrapper">
            <img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;' class="chatbot-message-wrapper-column-one">
            <div class="message-content chatbot-message-wrapper-column-two">
                @(new HtmlString(Resources.Resource.message_welcome_greeting.ToString()))
                <br />
                <div>
                    @foreach (var language in ViewBag.LanguageModel.Languages)
                    {
                        if (language.Value == ViewBag.LanguageModel.SelectedLanguage)
                        {
                            <button type="button" class="btn btn-success language-buttons" onclick="changeLanguage('@language.Value')">@language.Text</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary language-buttons" onclick="changeLanguage('@language.Value')">@language.Text</button>
                        }
                    }
                </div>

            </div>
            <div class="align-self-start chatbot-message-wrapper-column-three">
                <img id="playMessageImg-welcome-greeting-message-base64-audio" onclick="playAudio('welcome-greeting-message-base64-audio');" src="../Content/images/start-audio.svg" alt="avatar 1" style="width: 36px; height: 100%;">
            </div>

        </div>
    </div>
    <div class="input-container d-flex flex-row container-fluid">
        <button class="img-fluid bg-transparent send-button" style="padding-left:0px;" onclick="restartSession();">
            <img src="~/Content/images/restart.svg" class="img-fluid" />
        </button>
        <input id="userQuestionTextBox" type="text" class="message-input img-fluid border-success flex-shrink-1" onkeypress="onInputBoxKeyPressed(event)" placeholder="@Resources.Resource.message_ask_ur_question">
        <div class="d-flex img-fluid" style="max-height: 80px;">
            <button id="inputBtn" type="submit" class="send-button img-fluid sendtext">
            </button>
            <!--<button id="inputBtn" class="send-button bg-success img-fluid">@Resources.Resource.label_send</button>-->
            <button id="inputRecordBtn" class="send-button img-fluid bg-transparent">
                <img id="recordingImage" src="~/Content/images/startIcon.svg" class="img-fluid" />
            </button>
        </div>
    </div>
</div>


<script type="text/javascript">
    var inputTextId = "";
    let chunks = [];

    var querstionInput = "";

    var gumStream; 						//stream from getUserMedia()
    var rec; 							//Recorder.js object
    var input; 							//MediaStreamAudioSourceNode we'll be recording

    // shim for AudioContext when it's not avb.
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext //audio context to help us record
    var isMessagePlaying = false; // To maintain state of message is being played or not
    var previousPlayingMessageId = ""; // To maintain previous playing message id. So when user tries to play another message in middle of current playing message
    var lastUserTypedMessageId = "";
    // We need to stop current playing message.

    function chatLoader() {
        const responseLoader = "<div id='responseLoader' class='message left system-msg-left'><img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'> <div class='dot-flashing-container ms-3'><div class='ms-2 dot-flashing'></div></div></div>"
        $('#message-list').append(responseLoader);
    }

    function hideChatLoader() {
        $('#responseLoader').remove();
    }

    function enableDisableSendButton(textValue) {
        if (textValue) {
            $("#inputBtn").css({ opacity: 1 });
            $('#inputBtn').prop('disabled', false);

        } else {
            $("#inputBtn").css({ opacity: 0.4 });
            $('#inputBtn').prop('disabled', true);
        }
    }

    $(document).ready(function () {

        createGlobalAudioElement();

        // Get welcoome note and language greeting text audio
        var textsToGetSpeech = [];

        textsToGetSpeech.push({
            id: "welcome-greeting-message-base64-audio",
            value: $("#welcome-greeting-message-base64").val()
        });

        textsToGetSpeech.push({
            id: "language-change-greeting-message-base64-audio",
            value: $("#language-change-greeting-message-base64").val()
        });
        const contentType = 'audio/wav';

        if (textsToGetSpeech.length > 0) {

            for (var i = 0; i < textsToGetSpeech.length; i++) {
                var currentBase64String = textsToGetSpeech[i];
                const blob = b64toBlob(currentBase64String.value, contentType);

                loadAudioPlayer(blob, currentBase64String.id, "left");
            }
        }
        /*GetTextToSpeech(textsToGetSpeech);*/

        var languageChangedGreeting = sessionStorage.getItem('languageChangedMessage');
        if (languageChangedGreeting) {
            //showLanguageChangedMessage(languageChangedGreeting);
            var response = "<div class='message left system-msg-left'><img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'><div class='message-content ms-2'>" + languageChangedGreeting + "</div><img id='playMessageImg-language-change-greeting-message-base64-audio' class='align-self-start' onclick='playAudio(\"language-change-greeting-message-base64-audio\");' src='../Content/images/start-audio.svg' alt='avatar 1' style='width: 36px; height: 100%;'></div>";
            $('#message-list').append(response.replace(/\n/g, "<br>"));
            sessionStorage.removeItem('languageChangedMessage');
        }

        enableDisableSendButton();

        $('#userQuestionTextBox').on('change paste keyup input', function () {
            var textValue = $(this).val();

            // If value is there then only keep the send button enabled else keep it disabled.
            enableDisableSendButton(textValue);
        });

        var isRecording = false;
        getLocalStream();

        $("#inputRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingImage";
            recordAudio(recordImageID);
        });

        function recordAudio(recordImageID) {
            isRecording = !isRecording;

            if (isRecording) {
                $(recordImageID).attr("src", "../Content/images/stop.gif");

                $("#inputBtn").attr('disabled', 'disabled');
                startRecording();
            } else {
                $(recordImageID).attr("src", "../Content/images/startIcon.svg");
                $("#inputBtn").removeAttr('disabled');
                stopRecording();
            }
        }

        $(function () {
            $('body').on('click', '#inputBtn', function (e) {
                e.preventDefault();
                querstionInput = $('#userQuestionTextBox').val();

                var querstionInput = $('<div />').text(querstionInput).html();
                if (querstionInput) {

                    if (lastUserTypedMessageId != null && lastUserTypedMessageId != "") {
                        var userQuery = "<div class='message left user-msg-left'>"
                            + "<img src='../Content/images/user.svg' alt='avatar 1' class='avatar-img user-avatar-img rounded-circle'>"
                            + "<div class='message-content'>" + querstionInput + "</div>"
                            + "<img id='playMessageImg-" + lastUserTypedMessageId + "'"
                            + "class='align-self-start' onclick = 'playAudio("
                            + "\"" + lastUserTypedMessageId + "\""
                            + ");' src='../Content/images/start-audio.svg' alt='avatar 1' style='width: 36px; height: 100%;'>"
                            + "</div>";
                    } else {
                        var userQuery = "<div class='message left user-msg-left'>"
                            + "<img src='../Content/images/user.svg' alt='avatar 1' class='avatar-img user-avatar-img rounded-circle'>"
                            + "<div class='message-content'>" + querstionInput + "</div> </div>";
                    }

                    $('#message-list').append(userQuery.replace(/\n/g, "<br>"));
                    lastUserTypedMessageId = ""; // Clear last user typed messaged Id once it is sent
                }

                askQuestions(querstionInput);
            });
        });
    });

    function showUserRecordedMessageInTextBox(message) {
        $("#userQuestionTextBox").val(message);
        $("#userQuestionTextBox").trigger('change');
    }

    function processChatBotResponse(message, messageId, messageType, textInEnglish) {
        chatResponseView(message, messageId, messageType);
        if (String(textInEnglish).toLowerCase() == "invalid otp") {

            var resendOtpTranslation = $("#resend-otp-translation").val();
            var resendOTPBtn = "<div class='message left system-msg-left'><img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'><button class='send-button bg-success' onclick='resendOTP(this);'>" + resendOtpTranslation + "</button></div>";
            $('#message-list').append(resendOTPBtn);
        }
        $("#userQuestionTextBox").val('');
        $("#userQuestionTextBox").trigger('change');

        hideChatLoader();
    }

    function onInputBoxKeyPressed(event) {
        if (event.keyCode == 13 || event.key == "Enter") {
            $("#inputBtn").click();
        }
    }

    function resendOTP(element) {
        $(element).remove();
        askQuestions('resend OTP');
    }

    function chatResponseView(message, messageId, messageType) {
        if (message != "") {
            console.log("message Type: ", messageType);
            var feedbackOption = "<img id='thumbLikeButton-" + messageId + "' src='../Content/images/thumb_like.svg' alt='avatar 1' style='width:36px; height:100%;' onclick='likeMessage(\"" + messageId + "\")'>"
                + "<img id='thumbDisikeButton-" + messageId + "' src='../Content/images/thumb_dislike.svg' alt='avatar 1' style='width: 36px; height: 100%;' onclick='dislikeMessage(\"" + messageId + "\")'></div>";

            var feedbackOptionHtml = messageType == "final_response" ? feedbackOption : "";

            var response = "<div class='system-msg-left message left chatbot-message-wrapper'>"
                + "<img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;' class='chatbot-message-wrapper-column-one'>"
                + "<div class='message-content ms-2 chatbot-message-wrapper-column-two'>"
                + message
                + "</div>"
                + "<div class='align-self-start chatbot-message-wrapper-column-three'>"
                + "<img id='playMessageImg-" + messageId + "' src='../Content/images/start-audio.svg' alt='avatar 1' style='width:36px; height:100%;' onclick='playAudio(\"" + messageId + "\")'>"
                + feedbackOptionHtml
                + "</div>";

            // AADHAR Info UI Format START
            // If aadhar info is available in chat response then we need to display it in table format
            // Add bootstrap table class and "table-responsive card" classes as wrapper to beautify the table

            //Remove all the table related element and replace them with div to show adhar info in a new UI
            response = response.replaceAll("<table", "<div");
            response = response.replaceAll("<tbody", "<div");
            response = response.replaceAll("<tr", '<div class="div-row"');
            response = response.replaceAll("<td", "<div");

            response = response.replaceAll("/table>", "/div>");
            response = response.replaceAll("/tbody>", "/div>");
            response = response.replaceAll("/tr>", "/div>");
            response = response.replaceAll("/td>", "/div>");
            // AADHAR Info UI Format END

            $('#message-list').append(response.replace(/\n/g, "<br>"));
        }
    }

    function showLanguageChangedMessage(message) {
        var response = "<div class='message left system-msg-left'><img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'><div class='message-content ms-2'>" + message + "</div></div>";
        $('#message-list').append(response.replace(/\n/g, "<br>"));
    }

    function GetTextToSpeech(text) {
        $.ajax({
            type: "POST",
            url: "/Home/TextToSpeach",
            dataType: "json",
            data: { texts: text },
            async: false,
            success: function (data) {

                const contentType = 'audio/wav';

                //if (data?.audio) {
                //    for (var i = 0; i < data.audio; i++) {
                //        var currentAudio = data.audio[i];
                //        const blob = b64toBlob(currentAudio.audioContent, contentType);
                //        loadAudioPlayer(blob, "welcome-note-audio" + i.toString(), "left");
                //    }
                //}
            },
            failure: function (data) {
            }
        });
    }

    function askQuestions(input) {
        chatLoader();
        $("#userQuestionTextBox").val('');
        $("#userQuestionTextBox").trigger('change');

        scrollToBottom();
        $.ajax({
            type: "POST",
            url: "/Home/AskQuestions",
            dataType: "json",
            data: { querstion: input },
            success: function (data) {
                hideChatLoader();
                var message = "";

                const contentType = 'audio/wav';

                if (data?.audio?.text) {
                    const blob = b64toBlob(data.audio.text, contentType);
                    loadAudioPlayer(blob, data.messageId, "left");
                }

                if (data.Text !== null || data.Error !== null) {

                    if (data.Text !== null) {
                        message = data.Text;
                        processChatBotResponse(data.Text, data.messageId, data.messageType, data.textInEnglish);
                    } else if (data.Error !== null) {
                        message = data.Error;
                        processChatBotResponse(message, data.messageId, data.messageType);
                    }

                } else {
                    var response = "<div class='message left system-msg-left'> <img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'><div class='message-content ms-2'>" + message + "</div></div>";
                    $('#message-list').append(response.replace(/\n/g, "<br>"));
                    $("#userQuestionTextBox").val('');
                    $("#userQuestionTextBox").trigger('change');

                }

                scrollToBottom();
            },
            failure: function (data) {
            }
        });
    }

    function likeMessage(messageId) {
        chatLoader();

        // Check the current state of like button whether it is liked or unliked.
        // If it is already liked, and user has clicked on it again then we need to remove the like, else we need to like it
        var likeButtonSource = $("#thumbLikeButton-" + messageId)[0].src;

        var likeMessageApiEndPoint = "LikeMessage";
        var likeImageToReplace = "thumb_like_highlight.svg";

        var isLikeHighlight = false;

        if (likeButtonSource.indexOf('highlight') >= 0) {

            isLikeHighlight = true;

            likeMessageApiEndPoint = "UnlikeMessage";
            likeImageToReplace = "thumb_like.svg"
        }

        $.ajax({
            type: "POST",
            url: "/Home/" + likeMessageApiEndPoint,
            dataType: "json",
            data: { messageId: messageId },
            success: function (data) {
                hideChatLoader();

                if (data.IsSuccess == true) {

                    // Highlight the like button
                    $("#thumbLikeButton-" + messageId).attr("src", "../Content/images/" + likeImageToReplace);

                    // If earlier it was already hightlighed it means, user has un liked the previous like. We need to remove the the animation class. so if user clicks on the same like again, then it can show the animation, else animation won't be shown
                    if (isLikeHighlight) {
                        $("#thumbLikeButton-" + messageId).removeClass("feedback-animation");
                    } else {
                        $("#thumbLikeButton-" + messageId).addClass("feedback-animation");
                    }

                    $("#thumbDisikeButton-" + messageId).removeClass("feedback-animation");// Remove animation class from dislike button, to display animation when user hits the same button again

                    $("#thumbDisikeButton-" + messageId).attr("src", "../Content/images/thumb_dislike.svg"); // Change image to color less icon for dislike button as user has clicked on like button now
                }
            },
            failure: function (data) {
                hideChatLoader();
            }
        });
    }

    function dislikeMessage(messageId) {
        chatLoader();

        // Check the current state of like button whether it is liked or unliked.
        // If it is already liked, and user has clicked on it again then we need to remove the like, else we need to like it
        var dislikeButtonSource = $("#thumbDisikeButton-" + messageId)[0].src;

        var dislikeMessageApiEndPoint = "DislikeMessage";
        var dislikeImageToReplace = "thumb_dislike_highlight.svg";
        var isDislikeHighlight = false;
        if (dislikeButtonSource.indexOf('highlight') >= 0) {

            isDislikeHighlight = true;

            dislikeMessageApiEndPoint = "UnlikeMessage";
            dislikeImageToReplace = "thumb_dislike.svg";
        }

        $.ajax({
            type: "POST",
            url: "/Home/" + dislikeMessageApiEndPoint,
            dataType: "json",
            data: { messageId: messageId },
            success: function (data) {
                hideChatLoader();

                if (data.IsSuccess == true) {

                    // Highlight the like button
                    $("#thumbDisikeButton-" + messageId).attr("src", "../Content/images/" + dislikeImageToReplace);

                    // If earlier it was already hightlighed it means, user has un liked the previous like. We need to remove the the animation class. so if user clicks on the same like again, then it can show the animation, else animation won't be shown
                    if (isDislikeHighlight) {
                        $("#thumbDisikeButton-" + messageId).removeClass("feedback-animation");
                    } else {
                        $("#thumbDisikeButton-" + messageId).addClass("feedback-animation");
                    }

                    $("#thumbLikeButton-" + messageId).removeClass("feedback-animation"); // Remove animation class from like button, to display animation when user hits the same button again

                    $("#thumbLikeButton-" + messageId).attr("src", "../Content/images/thumb_like.svg");
                }
            },
            failure: function (data) {
                hideChatLoader();
            }
        });
    }

    function scrollToBottom() {
        $("#message-list").animate({ scrollTop: $('#message-list').prop("scrollHeight") }, 500);
    }

    function getLocalStream() {
        window.addEventListener('DOMContentLoaded', () => {
            if ('MediaRecorder' in window) {
                navigator.mediaDevices
                    .getUserMedia({ video: false, audio: true })
                    .then((stream) => {
                        window.localStream = stream;
                        window.localAudio.srcObject = stream;
                        window.localAudio.autoplay = true;
                    })
                    .catch((err) => {
                        console.error(`you got an error: ${err}`);
                    });
            }
        });
    }

    function startRecording() {

        var constraints = { audio: true, video: false }
        /*
            We're using the standard promise based getUserMedia()
            https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
        */

        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {

            /*
                create an audio context after getUserMedia is called
                sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                the sampleRate defaults to the one set in your OS for your playback device

            */
            audioContext = new AudioContext();

            /*  assign to gumStream for later use  */
            gumStream = stream;

            /* use the stream */
            input = audioContext.createMediaStreamSource(stream);

            /*
                Create the Recorder object and configure to record mono sound (1 channel)
                Recording 2 channels  will double the file size
            */
            rec = new Recorder(input, { numChannels: 1 })

            //start the recording process
            rec.record();

        }).catch(function (err) { });
    }

    function stopRecording() {

        //tell the recorder to stop the recording
        rec.stop();

        //stop microphone access
        gumStream.getAudioTracks()[0].stop();

        //create the wav blob and pass it on to createDownloadLink
        rec.exportWAV(createDownloadLink);
    }

    function createDownloadLink(blob) {
        var reader = new window.FileReader();
        reader.readAsDataURL(blob);

        reader.onloadend = function () {
            base64 = reader.result;
            base64 = base64.split(',')[1];
            //loadAudioPlayer(blob);
            chatLoader();
            scrollToBottom();
            $.ajax({
                type: "POST",
                url: "/Home/AskAudioQuestions",
                dataType: "json",
                data: { base64Question: base64 },
                success: function (data) {
                    var message = "";
                    hideChatLoader();

                    loadAudioPlayer(blob, data.messageId);
                    lastUserTypedMessageId = data.messageId;
                    if (data.Text) {
                        showUserRecordedMessageInTextBox(data.Text);
                    }
                    else if (data.Text !== null || data.Error !== null) {

                        if (data.Text !== null) {
                            message = data.Text;
                            $(inputTextId).val(message);
                            processChatBotResponse(data.Text, data.messgaeId, data.messageType, data.textInEnglish);
                        } else if (data.Error !== null) {
                            message = data.Error;
                            processChatBotResponse(message, data.messageId, data.messageType);
                        }
                    } else {
                        var response = "<div class='message left system-msg-left'><img src='../Content/images/MOA_logo.png' alt='avatar 1' style='width: 45px; height: 100%;'><div class='message-content ms-2'>" + message + "</div></div>";
                        $('#message-list').append(response.replace(/\n/g, "<br>"));
                        $("#userQuestionTextBox").val('');
                        $("#userQuestionTextBox").trigger('change');
                    }

                    scrollToBottom();
                },
                failure: function (data) {
                    hideChatLoader();
                }
            });
        }
    }

    function loadAudioPlayer(blob, messageId, alignment = 'right') {
        const blobUrl = URL.createObjectURL(blob);
        const div = document.createElement('div');
        div.className = "message " + alignment;

        // Avatar image
        if (alignment == 'left') {
            div.className += " system-msg-left";
            const avatarImg = document.createElement('img');
            avatarImg.src = '../Content/images/MOA_logo.png';
            avatarImg.alt = 'avatar 1';
            avatarImg.className = 'avatar-img';
            avatarImg.style.width = '45px';
            avatarImg.style.width = '100%';
            div.appendChild(avatarImg);
        }
        else {
        }

        const audio = document.createElement('audio');
        audio.style.padding = '6px';

        const anchor = document.createElement('a');
        anchor.setAttribute('href', blobUrl);
        const now = new Date();
        anchor.setAttribute(
            'download',
            `recording-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDay().toString().padStart(2, '0')}--${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}-${now.getSeconds().toString().padStart(2, '0')}.webm`
        );
        audio.setAttribute('src', blobUrl);
        audio.setAttribute('controls', 'controls');
        audio.setAttribute('controlsList', 'nodownload');
        audio.setAttribute('id', messageId);

        div.appendChild(audio);
        div.appendChild(anchor);
        div.style.display = "none"; // Hide audio player as we don't need to display it to the user. It will be played using a audio icon available next to text message
        $('#message-list').append(div);

    }

    const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
        const byteCharacters = atob(b64Data);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);

            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }

    function changeLanguage(language) {

        $.ajax({
            type: "POST",
            url: "/Home/ChangeLanguage",
            dataType: "json",
            data: { lang: language },
            success: function (data) {
                sessionStorage.setItem('languageChangedMessage', data.Message);
                //showLanguageChangedMessage(data.Message);

                location.reload();
            },
            failure: function (data) {
                alert('oops something went wrong');
            }
        });
    }

    async function playAudio(audioId) {

        const globalAudioElement = document.getElementById("globalAudioElement");

        if (globalAudioElement.paused == false) {
            globalAudioElement.pause();
            globalAudioElement.currentTime = 0;

            $('#playMessageImg-' + audioId).attr("src", "../Content/images/start-audio.svg");

            var allAudioEls = $('audio');

            allAudioEls.each(function () {

                var a = $(this).get(0);

                if (a.id != "globalAudioElement") {
                    a.pause();
                    a.currentTime = 0;
                    $('#playMessageImg-' + a.id).attr("src", "../Content/images/start-audio.svg");
                }
            });

            if (previousPlayingMessageId != audioId) {
                globalAudioElement.src = document.getElementById(audioId).src;
                // globalAudioElement.load();
                globalAudioElement.play();
                previousPlayingMessageId = audioId;

                $('#playMessageImg-' + audioId).attr("src", "../Content/images/stop-audio.svg");

                globalAudioElement.onended = function () {
                    previousPlayingMessageId = "";
                    $('#playMessageImg-' + audioId).attr("src", "../Content/images/start-audio.svg");
                };
            }

        } else {

            var allAudioEls = $('audio');

            allAudioEls.each(function () {

                var a = $(this).get(0);

                if (a.id != "globalAudioElement") {
                    a.pause();
                    a.currentTime = 0;
                    $('#playMessageImg-' + a.id).attr("src", "../Content/images/start-audio.svg");
                }
            });

            globalAudioElement.src = document.getElementById(audioId).src;
            // globalAudioElement.load();
            globalAudioElement.play();
            previousPlayingMessageId = audioId;

            $('#playMessageImg-' + audioId).attr("src", "../Content/images/stop-audio.svg");

            globalAudioElement.onended = function () {
                previousPlayingMessageId = "";
                $('#playMessageImg-' + audioId).attr("src", "../Content/images/start-audio.svg");
            };
        }
    }

    /**
    This messgae is used to change icon of play/pause audio.
     */
    function changePlayPauseMessageImg(messageId, showPlayIcon) {
        const messgaeElementId = '#' + messageId;
        if (showPlayIcon) {
            $(messgaeElementId).attr("src", "../Content/images/start-audio.svg");
        } else {
            $(messgaeElementId).attr("src", "../Content/images/stop-audio.svg");
        }
    }

    function restartSession() {

        scrollToBottom();
        $.ajax({
            type: "POST",
            url: "/Home/Logout",
            dataType: "json",
            data: null,
            success: function (data) {
                location.reload();
            },
            failure: function (data) {
            }
        });
    }

    function createGlobalAudioElement() {
        const div = document.createElement('div');
        div.className = "message left";

        const audio = document.createElement('audio');
        audio.style.padding = '6px';

        audio.setAttribute('controls', 'controls');
        audio.setAttribute('controlsList', 'nodownload');
        audio.setAttribute('id', "globalAudioElement");

        div.appendChild(audio);
        div.style.display = "none"; // Hide audio player as we don't need to display it to the user. It will be played using a audio icon available next to text message
        $('#message-list').append(div);
    }

</script>

