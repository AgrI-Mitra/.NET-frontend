@{
    ViewBag.Title = Resources.Resource.label_title;
}

<div class="chat-container">
    <div id="record-voice" class="record-voice">
        <div>
            <button id="inputMainRecordBtn" class="send-button bg-light">
                <img id="recordingMainImage" src="/Content/images/startIcon.svg" width="128" height="128" />
            </button>
        </div>
    </div>

    <div id="message-list" class="message-list">

    </div>
    <div class="input-container">
        <input id="userQuestionTextBox" type="text" class="message-input border-success" placeholder="@Resources.Resource.message_ask_ur_question">
        <button id="inputBtn" class="send-button bg-success">
            @Resources.Resource.label_send
        </button>
        <button id="inputRecordBtn" class="send-button bg-success">
            <img id="recordingImage" src="/Content/images/startIcon.svg" width="32" height="32" />
        </button>
    </div>
</div>
<!-- The below code is for the modal dialog -->
<div class="modal fade" id="beneficiaryModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="beneficiaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="beneficiaryModalLabel">@Resources.Resource.label_popUpTitle</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="inputText">
                    </form>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button id="identityRecordBtn" class="send-button bg-light">
                    <img id="identityRecordImage" src="/Content/images/startIcon.svg" width="32" height="32" />
                </button>
                <button type="button" class="send-button bg-success" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="submitButton" type="button" class="send-button bg-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<!-- The below code is for the modal dialog -->
<div class="modal fade" id="verifyModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="verifyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="verifyModallLabel">@Resources.Resource.label_popUpTitle3</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="verifyInputText">
                    </form>
                </div>
            </div>
            <div style="text-align:center">
                <span>@Resources.Resource.message_didnt_receive</span> <a href="#" class="link-success">@Resources.Resource.message_resend_again</a>
            </div>
            <div class="modal-footer justify-content-center">
                <button id="verifyRecordBtn" class="send-button bg-light">
                    <img id="verifyRecordImage" src="/Content/images/startIcon.svg" width="32" height="32" />
                </button>
                <button type="button" class="send-button bg-success" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="verifySubmitButton" type="button" class="send-button bg-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Message</strong>
            <small></small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <p id="toastBody">@Resources.Resource.error_empty_msg</p>
        </div>
    </div>
</div>

<script type="text/javascript">
    var inputTextId = "";
    let chunks = [];
    initializeAudio();
    let recorderInstance;
    const inputBtn = document.getElementById('inputBtn');

    const inputRecordBtn = document.getElementById('inputRecordBtn');

    //const inputMainRecordBtn = document.getElementById('inputMainRecordBtn');

    //const identityRecordBtn = document.getElementById('identityRecordBtn');

    //const verifyRecordBtn = document.getElementById('verifyRecordBtn');

    var hasNewSession = true;

    inputRecordBtn.setAttribute('hidden', 'hidden');

    $(document).ready(function () {

        getLocalStream();
        NewSessionActive(hasNewSession);

        var isRecording = false;

        $("#inputRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingImage";
            recordAudio(recordImageID);
        });

        $("#inputMainRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingMainImage";
            recordAudio(recordImageID);
        });

        $("#identityRecordBtn").click(function () {
            inputTextId = "#inputText";
            var recordImageID = "#identityRecordImage";
            recordAudio(recordImageID);
        });


        $("#verifyRecordBtn").click(function () {
            inputTextId = "#verifyInputText";
            var recordImageID = "#verifyRecordImage";
            recordAudio(recordImageID);
        });

        function recordAudio(recordImageID) {
            isRecording = !isRecording;

            if (isRecording) {
                $(recordImageID).attr("src", "/Content/images/stop.gif");
                startRecording();
            } else {
                $(recordImageID).attr("src", "/Content/images/startIcon.svg");
                stopRecording();
            }
        }

        $(function () {

            $('body').on('click', '#inputBtn', function (e) {
                e.preventDefault();
                var querstionInput = $('#userQuestionTextBox').val();
                $("#beneficiaryModal").modal('hide');
                $("#verifyModal").modal("hide");
                if (querstionInput) {
                    var userQuery = "<div class='message right'><div class='message-content'>" + querstionInput + "</div></div>";
                    $('#message-list').append(userQuery.replace(/\n/g, "<br>"));
                }

                $.ajax({
                    type: "POST",
                    url: "/Home/AskQuestions",
                    dataType: "json",
                    data: { querstion: querstionInput },
                    success: function (data) {
                        console.log('data: ', data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {

                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }

                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }


                    },
                    failure: function (data) {
                    }
                });
            });

            $('body').on('click', '#submitButton', function (e) {
                e.preventDefault();

                var inputText = $('#inputText').val();

                $.ajax({
                    type: "POST",
                    url: "/Home/IdentifyUser",
                    dataType: "json",
                    data: { identifyID: inputText },
                    success: function (data) {
                        console.log("data: ", data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {

                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }

                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            });

            $('body').on('click', '#verifySubmitButton', function (e) {
                e.preventDefault();
                var verifyInputText = $('#verifyInputText').val();

                $.ajax({
                    type: "POST",
                    url: "/Home/VerifyOTP",
                    dataType: "json",
                    data: { otp: verifyInputText },
                    success: function (data) {
                        console.log('data: ', data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {


                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text);
                                hasNewSession = false;
                                NewSessionActive(hasNewSession);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }
                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            });
        });
    });

    var openModalPopUp = function (hasError, message) {
        const userQuestionTextBoxValue = document.getElementById('userQuestionTextBox');

        // If message includes one of these texts then we need to open the modal
        let mobileAdharBenificiaryModalTexts = [
            "मोबाइल/आधार/बेनिफिशियरी",
            "enter a valid",
            "enter your Mobile",

        ];

        // If message includes one of these texts then we need to open OTP modal
        let otpModalTexts = [
            "ओटीपी",
            "OTP",
        ];

        if (!hasError) {

            // Check if message is asking to enter Mobile/Aadhaar/Benificiary Id
            let shouldOpenMobileAdharBenificiaryModal = false;

            for (var i = 0; i < mobileAdharBenificiaryModalTexts.length; i++) {
                let currentMobileAdharBenificiaryModalText = mobileAdharBenificiaryModalTexts[i];

                if (String(message).includes(currentMobileAdharBenificiaryModalText)) {
                    shouldOpenMobileAdharBenificiaryModal = true;
                    break;
                }
            }

            // Check if message is asking to enter otp
            let shouldOpenOtpModal = false;

            for (var i = 0; i < otpModalTexts.length; i++) {
                let currentOtpModalText = otpModalTexts[i];

                if (String(message).includes(currentOtpModalText)) {
                    shouldOpenOtpModal = true;
                    break;
                }
            }

            if (shouldOpenMobileAdharBenificiaryModal) {
                $("#verifyModal").modal("hide");
                $("#beneficiaryModal").modal("show");
            }

            else if (shouldOpenOtpModal) {
                $("#beneficiaryModal").modal("hide");
                $("#verifyModal").modal("show");
            }
            else {

                var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                $('#message-list').append(response.replace(/\n/g, "<br>"));
                $("#userQuestionTextBox").val('');

                $("#verifyModal").modal("hide");
                $("#beneficiaryModal").modal("hide");
                inputRecordBtn.removeAttribute('hidden', '');
                inputBtn.setAttribute('hidden', 'hidden');
                userQuestionTextBoxValue.setAttribute('disabled', 'disabled');
            }
        }
        else {
            toastMessagePopup(message);
        }
    }

    var toastMessagePopup = function (message) {
        const toastBody = document.getElementById('toastBody');
        const toastLiveExample = document.getElementById('liveToast');
        toastBody.innerText = message;
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }

    function getLocalStream() {
        window.addEventListener('DOMContentLoaded', () => {
            if ('MediaRecorder' in window) {
                navigator.mediaDevices
                    .getUserMedia({ video: false, audio: true })
                    .then((stream) => {
                        window.localStream = stream;
                        window.localAudio.srcObject = stream;
                        window.localAudio.autoplay = true;
                    })
                    .catch((err) => {
                        console.error(`you got an error: ${err}`);
                    });
            }
        });
    }

    function listenStopEvent() {
        //START To listen recording stop event
        recorderInstance.addEventListener('stop', () => {
            const mimeType = 'audio/webm';
            const recording = new Blob(chunks, {
                type: mimeType
            });
            var reader = new window.FileReader();
            reader.readAsDataURL(recording);

            reader.onloadend = function () {
                base64 = reader.result;
                base64 = base64.split(',')[1];
                console.log('base64: ', base64);

                $.ajax({
                    type: "POST",
                    url: "/Home/AskAudioQuestions",
                    dataType: "json",
                    data: { base64Question: base64 },
                    success: function (data) {
                        console.log("data: ", data);
                        var message = "";

                        if (data.Text !== null || data.Error !== null) {

                            if (data.Text !== null) {
                                message = data.Text;
                                //openModalPopUp(false, data.Text);
                                $(inputTextId).val(message);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }
                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            }
            chunks = [];
        });
        // END
    }

    function initializeAudio() {

        if ('MediaRecorder' in window) {
            try {

                navigator.mediaDevices
                    .getUserMedia({
                        audio: true,
                        video: false
                    })
                    .then((stream) => {

                        const mimeType = 'audio/webm';

                        const recorder = new MediaRecorder(stream, { type: mimeType });

                        recorderInstance = recorder;

                        listenStopEvent();

                        recorder.addEventListener('dataavailable', event => {
                            if (typeof event.data === 'undefined') return;
                            if (event.data.size === 0) return;
                            chunks.push(event.data);
                        });
                    })
                    .catch((err) => {

                    });

            } catch (error) {
                renderError(
                    'You denied access to the microphone so this demo will not work.'
                );
            }
        } else {
        }
    }

    function startRecording() {
        recorderInstance.start();
    }

    function stopRecording() {
        recorderInstance.stop();
    }

    function renderError(message) {
        toastMessagePopup(message);
    }

    function NewSessionActive(status) {
        const recordVoice = document.getElementById('record-voice');
        const messageList = document.getElementById('message-list');
        if (status) {
            $(recordVoice).show();
            $(messageList).hide();
        }
        else {
            $(recordVoice).hide();
            $(messageList).show();
        }
        console.log('load');
    }
</script>

