
@{
    ViewBag.Title = Resources.Resource.label_title;
}

<div class="chat-container">
    <div id="message-list" class="message-list">
    </div>
    <div class="input-container">
        <input id="userQuestionTextBox" type="text" class="message-input border-success" placeholder="@Resources.Resource.message_ask_ur_question">
        <button id="inputBtn" class="send-button bg-success">
            @Resources.Resource.label_send
        </button>
        <button id="inputRecordBtn" class="send-button bg-success">
            <img id="recordingImage" src="/Content/images/startIcon.svg" width="32" height="32" />
        </button>
    </div>
</div>
<!-- The below code is for the modal dialog -->
<div class="modal fade" id="beneficiaryModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="beneficiaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="beneficiaryModalLabel">@Resources.Resource.label_popUpTitle</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="inputText">
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-info" data-bs-dismiss="modal">Speak</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="submitButton" type="button" class="btn btn-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<!-- The below code is for the modal dialog -->
<div class="modal fade" id="verifyModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="verifyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="verifyModallLabel">@Resources.Resource.label_popUpTitle3</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="verifyInputText">
                    </form>
                </div>
            </div>
            <div style="text-align:center">
                <span>@Resources.Resource.message_didnt_receive</span> <a href="#" class="link-success">@Resources.Resource.message_resend_again</a>
            </div>
            <div class="modal-footer align-items-center">
                <button type="button" class="btn btn-info" data-bs-dismiss="modal">Speak</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="verifySubmitButton" type="button" class="btn btn-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Message</strong>
            <small></small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <p id="toastBody">@Resources.Resource.error_empty_msg</p>
        </div>
    </div>
</div>

<script type="text/javascript">
    const inputBtn = document.getElementById('inputBtn');

    //const inputRecordBtn = document.getElementById('inputRecordBtn');

    inputRecordBtn.setAttribute('hidden', 'hidden');

    $(document).ready(function () {

        getLocalStream();

        var isRecording = false;

        $("#inputRecordBtn").click(function () {
            isRecording = !isRecording;
            $("#recordingImage").attr("src", isRecording ? "/Content/images/startIcon.svg" : "/Content/images/stop.gif");
                @*$.ajax({
                    url: '@Url.Action("CheckRecordingStatus", "Home")',
                    type: 'POST',
                    success: function (result) {
                        // Update the image src based on the new boolean value
                        $("#recordingImage").attr("src", result.isRecording ? "~/Content/images/startIcon.svg" : "~/Content/images/stop.gif");
                    }
                });*@
        });

        $(function () {

            $('body').on('click', '#inputBtn', function (e) {
                e.preventDefault();
                var querstionInput = $('#userQuestionTextBox').val();
                $("#beneficiaryModal").modal('hide');
                $("#verifyModal").modal("hide");
                if (querstionInput) {
                    var userQuery = "<div class='message right'><div class='message-content'>" + querstionInput + "</div></div>";
                    $('#message-list').append(userQuery);
                }

                $.ajax({
                    type: "POST",
                    url: "/Home/AskQuestions",
                    dataType: "json",
                    data: { querstion: querstionInput },
                    success: function (data) {
                        console.log(data);
                        var message = "";
                        if (data.Text !== null) {
                            message = data.Text;
                            openModalPopUp(false, data.Text);
                        }
                        if (data.Error !== null) {
                            message = data.Error;
                            openModalPopUp(true, data.Error);
                        }

                        response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                        $('#message-list').append(response);
                        $("#userQuestionTextBox").val('');
                    },
                    failure: function (data) {
                        console.log('oops something went wrong');
                    }
                });
            });

            $('body').on('click', '#submitButton', function (e) {
                e.preventDefault();

                var inputText = $('#inputText').val();

                $.ajax({
                    type: "POST",
                    url: "/Home/IdentifyUser",
                    dataType: "json",
                    data: { identifyID: inputText },
                    success: function (data) {
                        console.log(data);
                        var message = "";
                        if (data.Text !== null) {
                            message = data.Text;
                            openModalPopUp(false, data.Text);
                        }
                        if (data.Error !== null) {
                            message = data.Error;
                            openModalPopUp(true, message);
                        }

                        response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                        $('#message-list').append(response);
                        $("#userQuestionTextBox").val('');
                    },
                    failure: function (data) {
                        console.log('oops something went wrong');
                    }
                });
            });

            $('body').on('click', '#verifySubmitButton', function (e) {
                e.preventDefault();
                var verifyInputText = $('#verifyInputText').val();

                $.ajax({
                    type: "POST",
                    url: "/Home/VerifyOTP",
                    dataType: "json",
                    data: { otp: verifyInputText },
                    success: function (data) {
                        var message = "";
                        if (data.Text !== null) {
                            message = data.Text;
                            openModalPopUp(false, message);
                        }
                        if (data.Error !== null)
                            message = data.Error;

                        response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                        $('#message-list').append(response);
                        $("#userQuestionTextBox").val('');
                    },
                    failure: function (data) {
                        console.log('oops something went wrong');
                    }
                });
            });
        });
    });

    var openModalPopUp = function (hasError, message) {
        const userQuestionTextBoxValue = document.getElementById('userQuestionTextBox');

        if (!hasError) {
            if (String(message).includes('enter a valid')) {
                if (userQuestionTextBoxValue.innerText) {
                    $("#verifyModal").modal("hide");
                    $("#beneficiaryModal").modal("show");
                }
            }
            else if (String(message).includes('enter the OTP') || String(message).includes('Invalid OTP')) {
                $("#beneficiaryModal").modal("hide");
                $("#verifyModal").modal("show");
            }
            else {
                $("#verifyModal").modal("hide");
                $("#beneficiaryModal").modal("hide");
                inputRecordBtn.removeAttribute('hidden', '');
                inputBtn.setAttribute('hidden', 'hidden');
                userQuestionTextBoxValue.setAttribute('disabled', 'disabled');
                recordAudio();

            }
        }
        else {
            toastMessagePopup(message);
        }
    }

    var toastMessagePopup = function (message) {
        const toastBody = document.getElementById('toastBody');
        const toastLiveExample = document.getElementById('liveToast');
        toastBody.innerText = message;
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }

    function getLocalStream() {
        window.addEventListener('DOMContentLoaded', () => { 
            if ('MediaRecorder' in window) {
                navigator.mediaDevices
                    .getUserMedia({ video: false, audio: true })
                    .then((stream) => {
                        window.localStream = stream;
                        window.localAudio.srcObject = stream;
                        window.localAudio.autoplay = true;
                    })
                    .catch((err) => {
                        console.error(`you got an error: ${err}`);
                    });
            }
        });
    }


    function recordAudio() {
        if ('MediaRecorder' in window) {
            try {
                const stream = navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: false
                });
                const mimeType = 'audio/webm';
                let chunks = [];
                const recorder = new MediaRecorder(stream, { type: mimeType });
                recorder.addEventListener('dataavailable', event => {
                    if (typeof event.data === 'undefined') return;
                    if (event.data.size === 0) return;
                    chunks.push(event.data);
                });
                recorder.addEventListener('stop', () => {
                    const recording = new Blob(chunks, {
                        type: mimeType
                    });
                    var reader = new window.FileReader();
                    reader.readAsDataURL(recording);

                    reader.onloadend = function () {
                        base64 = reader.result;
                        base64 = base64.split(',')[1];
                        console.log(base64);
                    }
                    renderRecording(recording, list);
                    chunks = [];
                });
                recordButton.removeAttribute('hidden');
                recordButton.addEventListener('click', () => {
                    if (recorder.state === 'inactive') {
                        recorder.start();
                        recordButton.innerText = 'Stop';
                    } else {
                        recorder.stop();
                        recordButton.innerText = 'Record';
                    }
                });
                console.log(stream);
            } catch {
                renderError(
                    'You denied access to the microphone so this demo will not work.'
                );
            }
        } else {
        }
    }

    function renderError(message) {
        toastMessagePopup(message);
    }

    function renderRecording(blob, list) {
        const blobUrl = URL.createObjectURL(blob);
        const li = document.createElement('li');
        const audio = document.createElement('audio');
        const anchor = document.createElement('a');
        anchor.setAttribute('href', blobUrl);
        const now = new Date();
        anchor.setAttribute(
            'download',
            `recording-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDay().toString().padStart(2, '0')}--${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}-${now.getSeconds().toString().padStart(2, '0')}.webm`
        );
        anchor.innerText = 'Download';
        audio.setAttribute('src', blobUrl);
        audio.setAttribute('controls', 'controls');
        li.appendChild(audio);
        li.appendChild(anchor);
        list.appendChild(li);
    }
</script>

