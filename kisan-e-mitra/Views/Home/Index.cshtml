@{
    ViewBag.Title = Resources.Resource.label_title;
}

<div class="chat-container container-fluid">
    <div id="message-list" class="message-list">
    </div>
    <div class="input-container d-flex flex-row container-fluid">
        <input id="userQuestionTextBox" type="text" class="message-input img-fluid border-success flex-shrink-1" placeholder="@Resources.Resource.message_ask_ur_question">
        <div class="d-flex img-fluid" style="max-height: 80px;">
            <button id="inputBtn" class="send-button bg-success img-fluid">
                @Resources.Resource.label_send
            </button>
            <button id="inputRecordBtn" class="send-button bg-success img-fluid">
                <img id="recordingImage" src="~/Content/images/startIcon.svg" class="img-fluid"/>
            </button>
        </div>
    </div>
</div>


<script type="text/javascript">
    var inputTextId = "";
    let chunks = [];

    var querstionInput = "";

    var gumStream; 						//stream from getUserMedia()
    var rec; 							//Recorder.js object
    var input; 							//MediaStreamAudioSourceNode we'll be recording

    // shim for AudioContext when it's not avb.
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext //audio context to help us record

    function chatLoader() {
        const responseLoader = "<div id='responseLoader' class='message left'><div class='dot-flashing'></div></div>"
        $('#message-list').append(responseLoader);
    }

    function hideChatLoader() {
        $('#responseLoader').remove();
    }

    function enableDisableSendButton(textValue) {
        if (textValue) {
            $("#inputBtn").removeAttr('disabled');
            $("#inputBtn").css("display", "flex");
            $("#inputRecordBtn").css("display", "none");

        } else {
            $("#inputBtn").attr('disabled', 'disabled');

            $("#inputBtn").css("display", "none");
            $("#inputRecordBtn").css("display", "flex");

        }
    }

    $(document).ready(function () {

        enableDisableSendButton();

        $('#userQuestionTextBox').on('change paste keyup input', function () {
            var textValue = $(this).val();

            // If value is there then only keep the send button enabled else keep it disabled.
            enableDisableSendButton(textValue);
        });

        var isRecording = false;
        getLocalStream();

        $("#inputRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingImage";
            recordAudio(recordImageID);
        });

        function recordAudio(recordImageID) {
            isRecording = !isRecording;

            if (isRecording) {
                $(recordImageID).attr("src", "../Content/images/stop.gif");

                $("#inputBtn").attr('disabled', 'disabled');
                startRecording();
            } else {
                $(recordImageID).attr("src", "../Content/images/startIcon.svg");
                $("#inputBtn").removeAttr('disabled');
                stopRecording();
            }
        }

        $(function () {
            $('body').on('click', '#inputBtn', function (e) {
                e.preventDefault();
                querstionInput = $('#userQuestionTextBox').val();
                if (querstionInput) {
                    var userQuery = "<div class='message right'><div class='message-content'>" + querstionInput + "</div></div>";
                    $('#message-list').append(userQuery.replace(/\n/g, "<br>"));
                }
                askQuestions(querstionInput);
            });

            //$('body').on('click', '#resendOTP', function (e) {
            //    e.preventDefault();
            //    askQuestions('resend OTP');
            //});
        });
    });

    function showUserRecordedMessageInTextBox(message) {
        $("#userQuestionTextBox").val(message);
        $("#userQuestionTextBox").trigger('change');
    }

    function openModalPopUp(message) {
        chatResponseView(message);

        if (String(message).toLowerCase() == "invalid otp" || String(message).toLowerCase() == "अमान्य ओ. टी. पी") {
            var resendOTPBtn = "<div class='message left'><button class='send-button bg-success' onclick='resendOTP(this);'>Resend OTP</button></div>";
            $('#message-list').append(resendOTPBtn);
        }
        $("#userQuestionTextBox").val('');
        $("#userQuestionTextBox").trigger('change');

        $('#responseLoader').remove();
    }

    function resendOTP(element) {
        $(element).remove();
        askQuestions('resend OTP');
    }

    function chatResponseView(message) {
        if (message != "") {
            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
            $('#message-list').append(response.replace(/\n/g, "<br>"));
        }
    }

    function askQuestions(input) {
        chatLoader();
        $("#userQuestionTextBox").val('');
        $("#userQuestionTextBox").trigger('change');

        scrollToBottom();
        $.ajax({
            type: "POST",
            url: "/Home/AskQuestions",
            dataType: "json",
            data: { querstion: input },
            success: function (data) {

                hideChatLoader();
                var message = "";

                const contentType = 'audio/wav';

                if (data?.audio?.text) {
                    const blob = b64toBlob(data.audio.text, contentType);
                    loadAudioPlayer(blob, "left");
                }

                if (data.Text !== null || data.Error !== null) {

                    if (data.Text !== null) {
                        message = data.Text;
                        openModalPopUp(data.Text, data.textInEnglish);
                    }

                    if (data.Error !== null) {
                        message = data.Error;
                        openModalPopUp(message);
                    }

                } else {
                    var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                    $('#message-list').append(response.replace(/\n/g, "<br>"));
                    $("#userQuestionTextBox").val('');
                    $("#userQuestionTextBox").trigger('change');

                }

                scrollToBottom();
            },
            failure: function (data) {
            }
        });
    }

    function scrollToBottom() {
        $("#message-list").animate({ scrollTop: $('#message-list').prop("scrollHeight") }, 500);
    }

    function getLocalStream() {
        window.addEventListener('DOMContentLoaded', () => {
            if ('MediaRecorder' in window) {
                navigator.mediaDevices
                    .getUserMedia({ video: false, audio: true })
                    .then((stream) => {
                        window.localStream = stream;
                        window.localAudio.srcObject = stream;
                        window.localAudio.autoplay = true;
                    })
                    .catch((err) => {
                        console.error(`you got an error: ${err}`);
                    });
            }
        });
    }

    function startRecording() {

        var constraints = { audio: true, video: false }
        /*
            We're using the standard promise based getUserMedia()
            https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
        */

        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {

            /*
                create an audio context after getUserMedia is called
                sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                the sampleRate defaults to the one set in your OS for your playback device

            */
            audioContext = new AudioContext();

            /*  assign to gumStream for later use  */
            gumStream = stream;

            /* use the stream */
            input = audioContext.createMediaStreamSource(stream);

            /*
                Create the Recorder object and configure to record mono sound (1 channel)
                Recording 2 channels  will double the file size
            */
            rec = new Recorder(input, { numChannels: 1 })

            //start the recording process
            rec.record();

        }).catch(function (err) { });
    }

    function stopRecording() {

        //tell the recorder to stop the recording
        rec.stop();

        //stop microphone access
        gumStream.getAudioTracks()[0].stop();

        //create the wav blob and pass it on to createDownloadLink
        rec.exportWAV(createDownloadLink);
    }

    function createDownloadLink(blob) {
        var reader = new window.FileReader();
        reader.readAsDataURL(blob);

        reader.onloadend = function () {
            base64 = reader.result;
            //console.log('reader.result: ', reader.result);
            base64 = base64.split(',')[1];
            //console.log('base64 wav: ', base64);
            loadAudioPlayer(blob);
            chatLoader();
            scrollToBottom();
            $.ajax({
                type: "POST",
                url: "/Home/AskAudioQuestions",
                dataType: "json",
                data: { base64Question: base64 },
                success: function (data) {
                    var message = "";
                    hideChatLoader();
                    if (data.Text) {
                        showUserRecordedMessageInTextBox(data.Text);
                    }
                    else if (data.Text !== null || data.Error !== null) {

                        if (data.Text !== null) {
                            message = data.Text;
                            $(inputTextId).val(message);
                            openModalPopUp(data.Text);
                        }

                        if (data.Error !== null) {
                            message = data.Error;
                            openModalPopUp(message);
                        }
                    } else {
                        var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                        $('#message-list').append(response.replace(/\n/g, "<br>"));
                        $("#userQuestionTextBox").val('');
                        $("#userQuestionTextBox").trigger('change');

                        $('#responseLoader').remove();
                    }

                    scrollToBottom();
                },
                failure: function (data) {
                }
            });
        }
    }

    function renderError(message) {
        chatResponseView(message);
    }

    function loadAudioPlayer(blob, alignment = 'right') {
        const blobUrl = URL.createObjectURL(blob);
        const div = document.createElement('div');
        div.className = "message " + alignment;
        const audio = document.createElement('audio');
        const anchor = document.createElement('a');
        anchor.setAttribute('href', blobUrl);
        const now = new Date();
        anchor.setAttribute(
            'download',
            `recording-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDay().toString().padStart(2, '0')}--${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}-${now.getSeconds().toString().padStart(2, '0')}.webm`
        );
        audio.setAttribute('src', blobUrl);
        audio.setAttribute('controls', 'controls');
        audio.setAttribute('controlsList', 'nodownload');
        div.appendChild(audio);
        div.appendChild(anchor);
        $('#message-list').append(div);

    }

    const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
        const byteCharacters = atob(b64Data);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);

            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }

</script>

