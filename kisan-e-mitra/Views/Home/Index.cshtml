@{
    ViewBag.Title = Resources.Resource.label_title;
}

<div class="chat-container">
    <div id="record-voice" class="record-voice">
        <div>
            <button id="inputMainRecordBtn" class="send-button bg-light">
                <img id="recordingMainImage" src="~/Content/images/startIcon.svg" width="128" height="128" />
            </button>
        </div>
    </div>

    <div id="message-list" class="message-list">

    </div>
    <div class="input-container">
        <input id="userQuestionTextBox" type="text" class="message-input border-success" placeholder="@Resources.Resource.message_ask_ur_question">
        <button id="inputBtn" class="send-button bg-success">
            @Resources.Resource.label_send
        </button>
        <button id="inputRecordBtn" class="send-button bg-success">
            <img id="recordingImage" src="~/Content/images/startIcon.svg" width="32" height="32" />
        </button>
    </div>
</div>
<!-- The below code is for the modal dialog -->
<div class="modal fade" id="beneficiaryModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="ben         * e         *
        ficiaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="beneficiaryModalLabel">@Resources.Resource.label_popUpTitle</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="inputText">
                    </form>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button id="identityRecordBtn" class="send-button bg-light">
                    <img id="identityRecordImage" src="~/Content/images/startIcon.svg" width="32" height="32" />
                </button>
                <button type="button" class="send-button bg-success" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="submitButton" type="button" class="send-button bg-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<!-- The below code is for the aadhar 4 digit modal dialog -->
<div class="modal fade" id="aadhar4DigitModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="aadhar4DigitModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="aadhar4DigitModallLabel">@Resources.Resource.label_popUpTitle2</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="aadhar4DigitModalInputText">
                    </form>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button id="aadhar4DigitModalRecordBtn" class="send-button bg-light">
                    <img id="aadhar4DigitModalRecordImage" src="~/Content/images/startIcon.svg" width="32" height="32" />
                </button>
                <button type="button" class="send-button bg-success" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="aadhar4DigitModalSubmitButton" type="button" class="send-button bg-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<!-- The below code is for the modal dialog -->
<div class="modal fade" id="verifyModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="verifyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="verifyModallLabel">@Resources.Resource.label_popUpTitle3</h1>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="form-group">
                    <form id="myForm">
                        <input class="form-control" id="verifyInputText">
                    </form>
                </div>
            </div>
            <div style="text-align:center">
                <span>@Resources.Resource.message_didnt_receive</span> <a href="#" class="link-success">@Resources.Resource.message_resend_again</a>
            </div>
            <div class="modal-footer justify-content-center">
                <button id="verifyRecordBtn" class="send-button bg-light">
                    <img id="verifyRecordImage" src="~/Content/images/startIcon.svg" width="32" height="32" />
                </button>
                <button type="button" class="send-button bg-success" data-bs-dismiss="modal">@Resources.Resource.label_close</button>
                <button id="verifySubmitButton" type="button" class="send-button bg-success">@Resources.Resource.label_submit</button>
            </div>
        </div>
    </div>
</div>

<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Message</strong>
            <small></small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <p id="toastBody">@Resources.Resource.error_empty_msg</p>
        </div>
    </div>
</div>

<script type="text/javascript">

    var askQuestionApiUrl = '@Url.Action("AskQuestions", "Home")';
    var identifyUserApiUrl = '@Url.Action("IdentifyUser", "Home")';
    var verifyOTPApiUrl = '@Url.Action("VerifyOTP", "Home")';
    var askAudioQuestionsApiUrl = '@Url.Action("AskAudioQuestions", "Home")';
    

    var inputTextId = "";
    let chunks = [];
    initializeAudio();
    let recorderInstance;
    const inputBtn = document.getElementById('inputBtn');

    const inputRecordBtn = document.getElementById('inputRecordBtn');

    var gumStream; 						//stream from getUserMedia()
    var rec; 							//Recorder.js object
    var input; 							//MediaStreamAudioSourceNode we'll be recording

    // shim for AudioContext when it's not avb.
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext //audio context to help us record

    var hasNewSession = true;

    inputRecordBtn.setAttribute('hidden', 'hidden');


    function showHideAudioAndTextInputButton(textValue) {
        if (textValue) {
            inputRecordBtn.setAttribute('hidden', 'hidden');
            inputBtn.removeAttribute('hidden', '');
        } else {
            inputBtn.setAttribute('hidden', 'hidden');
            inputRecordBtn.removeAttribute('hidden', '');
        }
    }

    $(document).ready(function () {

        showHideAudioAndTextInputButton($("#userQuestionTextBox").val());

        /**
        // Keep checking userQuestionTextBox change events
        // When there is a text written show Send button
        // Show Audio button when it is empty
        */
        //START
        $('#userQuestionTextBox').on('change paste keyup input', function () {
            var textValue = $(this).val();

            showHideAudioAndTextInputButton(textValue);
        });
        //END

        getLocalStream();
        NewSessionActive(hasNewSession);

        var isRecording = false;

        $("#inputRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingImage";
            recordAudio(recordImageID);
        });

        $("#inputMainRecordBtn").click(function () {
            inputTextId = "#userQuestionTextBox";
            var recordImageID = "#recordingMainImage";
            recordAudio(recordImageID);
        });

        $("#identityRecordBtn").click(function () {
            inputTextId = "#inputText";
            var recordImageID = "#identityRecordImage";
            recordAudio(recordImageID);
        });


        $("#verifyRecordBtn").click(function () {
            inputTextId = "#verifyInputText";
            var recordImageID = "#verifyRecordImage";
            recordAudio(recordImageID);
        });

        //aadhar4DigitModalRecordBtn
        $("#aadhar4DigitModalRecordBtn").click(function () {
            inputTextId = "#aadhar4DigitModalInputText";
            var recordImageID = "#aadhar4DigitModalRecordImage";
            recordAudio(recordImageID);
        });

        function recordAudio(recordImageID) {
            isRecording = !isRecording;

            if (isRecording) {
                $(recordImageID).attr("src", "~/Content/images/stop.gif");
                startRecording();
            } else {
                $(recordImageID).attr("src", "~/Content/images/startIcon.svg");
                stopRecording();
            }
        }

        $(function () {

            $('body').on('click', '#inputBtn', function (e) {
                e.preventDefault();
                var querstionInput = $('#userQuestionTextBox').val();
                $("#beneficiaryModal").modal('hide');
                $("#verifyModal").modal("hide");
                if (querstionInput) {
                    var userQuery = "<div class='message right'><div class='message-content'>" + querstionInput + "</div></div>";
                    $('#message-list').append(userQuery.replace(/\n/g, "<br>"));
                }

                $.ajax({
                    type: "POST",
                    url: askQuestionApiUrl,
                    dataType: "json",
                    data: { querstion: querstionInput },
                    success: function (data) {
                        console.log('data: ', data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {

                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text, data.textInEnglish);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }

                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }


                    },
                    failure: function (data) {
                    }
                });
            });

            $('body').on('click', '#submitButton', function (e) {
                e.preventDefault();

                var inputText = $('#inputText').val();

                $.ajax({
                    type: "POST",
                    url: identifyUserApiUrl,
                    dataType: "json",
                    data: { identifyID: inputText },
                    success: function (data) {
                        console.log("data: ", data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {

                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text, data.textInEnglish);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }

                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            });

            $('body').on('click', '#aadhar4DigitModalSubmitButton', function (e) {
                e.preventDefault();
                var verifyInputText = $('#aadhar4DigitModalInputText').val();

                $.ajax({
                    type: "POST",
                    url: verifyOTPApiUrl,
                    dataType: "json",
                    data: { otp: verifyInputText },
                    success: function (data) {
                        console.log('data: ', data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {


                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text, data.textInEnglish);
                                hasNewSession = false;
                                NewSessionActive(hasNewSession);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }
                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            });

            $('body').on('click', '#verifySubmitButton', function (e) {
                e.preventDefault();
                var verifyInputText = $('#verifyInputText').val();

                $.ajax({
                    type: "POST",
                    url: verifyOTPApiUrl,
                    dataType: "json",
                    data: { otp: verifyInputText },
                    success: function (data) {
                        console.log('data: ', data);
                        var message = "";
                        if (data.Text !== null || data.Error !== null) {


                            if (data.Text !== null) {
                                message = data.Text;
                                openModalPopUp(false, data.Text, data.textInEnglish);
                                hasNewSession = false;
                                NewSessionActive(hasNewSession);
                            }

                            if (data.Error !== null) {
                                message = data.Error;
                                openModalPopUp(true, message);
                            }
                        } else {
                            var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                            $('#message-list').append(response.replace(/\n/g, "<br>"));
                            $("#userQuestionTextBox").val('');
                        }
                    },
                    failure: function (data) {
                    }
                });
            });
        });
    });

    var openModalPopUp = function (hasError, message, textInEnglish) {
        const userQuestionTextBoxValue = document.getElementById('userQuestionTextBox');

        // If message includes one of these texts then we need to open the modal
        let mobileAdharBenificiaryModalTexts = [
            "Aadhaar Number / PM KISAN ID / Phone no.",
            "enter your Mobile",

        ];

        // Aadhar 4 digit modal
        let aadhar4DigitModalTexts = [
            "Enter your last 4 digits of Aadhaar"
        ];

        // If message includes one of these texts then we need to open OTP modal
        let otpModalTexts = [
            "OTP",
        ];

        if (!hasError) {

            // Check if message is asking to enter Mobile/Aadhaar/Benificiary Id
            let shouldOpenMobileAdharBenificiaryModal = false;

            for (var i = 0; i < mobileAdharBenificiaryModalTexts.length; i++) {
                let currentMobileAdharBenificiaryModalText = mobileAdharBenificiaryModalTexts[i];

                if (String(textInEnglish).includes(currentMobileAdharBenificiaryModalText)) {
                    shouldOpenMobileAdharBenificiaryModal = true;
                    break;
                }
            }

            // Check if message is asking to enter aadhar 4 digits
            let shouldShowAadhar4DigitModal = false;

            for (var i = 0; i < aadhar4DigitModalTexts.length; i++) {
                let currentaadhar4DigitModalText = aadhar4DigitModalTexts[i];

                if (String(textInEnglish).includes(currentaadhar4DigitModalText)) {
                    shouldShowAadhar4DigitModal = true;
                    break;
                }
            }

            // Check if message is asking to enter otp
            let shouldOpenOtpModal = false;

            for (var i = 0; i < otpModalTexts.length; i++) {
                let currentOtpModalText = otpModalTexts[i];

                if (String(textInEnglish).includes(currentOtpModalText)) {
                    shouldOpenOtpModal = true;
                    break;
                }
            }

            if (shouldOpenMobileAdharBenificiaryModal) {
                $("#verifyModal").modal("hide");
                $("#beneficiaryModal").modal("show");
            }
            else if (shouldShowAadhar4DigitModal) {
                $("#beneficiaryModal").modal("hide");
                $("#aadhar4DigitModal").modal("show");
            }
            else if (shouldOpenOtpModal) {
                $("#aadhar4DigitModal").modal("hide");
                $("#verifyModal").modal("show");
            }
            else {

                var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                $('#message-list').append(response.replace(/\n/g, "<br>"));
                $("#userQuestionTextBox").val('');

                $("#verifyModal").modal("hide");
                $("#beneficiaryModal").modal("hide");
                inputRecordBtn.removeAttribute('hidden', '');
                inputBtn.setAttribute('hidden', 'hidden');
                /*userQuestionTextBoxValue.setAttribute('disabled', 'disabled');*/
            }
        }
        else {
            toastMessagePopup(message);
        }
    }

    var toastMessagePopup = function (message) {
        const toastBody = document.getElementById('toastBody');
        const toastLiveExample = document.getElementById('liveToast');
        toastBody.innerText = message;
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }

    function getLocalStream() {
        window.addEventListener('DOMContentLoaded', () => {
            if ('MediaRecorder' in window) {
                navigator.mediaDevices
                    .getUserMedia({ video: false, audio: true })
                    .then((stream) => {
                        window.localStream = stream;
                        window.localAudio.srcObject = stream;
                        window.localAudio.autoplay = true;
                    })
                    .catch((err) => {
                        console.error(`you got an error: ${err}`);
                    });
            }
        });
    }

    function listenStopEvent() {
        //START To listen recording stop event
        //recorderInstance.addEventListener('stop', () => {
        //    const mimeType = 'audio/wav';
        //    const recording = new Blob(chunks, {
        //        type: mimeType
        //    });
        //    var reader = new window.FileReader();
        //    reader.readAsDataURL(recording);

        //    reader.onloadend = function () {
        //        base64 = reader.result;
        //        base64 = base64.split(',')[1];
        //        console.log('base64: ', base64);

        //        $.ajax({
        //            type: "POST",
        //            url: "/Home/AskAudioQuestions",
        //            dataType: "json",
        //            data: { base64Question: base64 },
        //            success: function (data) {
        //                console.log("data: ", data);
        //                var message = "";

        //                if (data.Text !== null || data.Error !== null) {

        //                    if (data.Text !== null) {
        //                        message = data.Text;
        //                        //openModalPopUp(false, data.Text);
        //                        $(inputTextId).val(message);
        //                    }

        //                    if (data.Error !== null) {
        //                        message = data.Error;
        //                        openModalPopUp(true, message);
        //                    }
        //                } else {
        //                    var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
        //                    $('#message-list').append(response.replace(/\n/g, "<br>"));
        //                    $("#userQuestionTextBox").val('');
        //                }
        //            },
        //            failure: function (data) {
        //            }
        //        });
        //    }
        //    chunks = [];
        //});
        // END
    }

    function initializeAudio() {

        //if ('MediaRecorder' in window) {
        //    try {

        //        navigator.mediaDevices
        //            .getUserMedia({
        //                audio: true,
        //                video: false
        //            })
        //            .then((stream) => {

        //                const mimeType = 'audio/webm';

        //                const recorder = new MediaRecorder(stream, { type: mimeType });

        //                recorderInstance = recorder;

        //                listenStopEvent();

        //                recorder.addEventListener('dataavailable', event => {
        //                    if (typeof event.data === 'undefined') return;
        //                    if (event.data.size === 0) return;
        //                    chunks.push(event.data);
        //                });
        //            })
        //            .catch((err) => {

        //            });

        //    } catch (error) {
        //        renderError(
        //            'You denied access to the microphone so this demo will not work.'
        //        );
        //    }
        //} else {
        //}
    }

    function startRecording() {

        var constraints = { audio: true, video: false }

        /*
            We're using the standard promise based getUserMedia()
            https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
        */

        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {

            /*
                create an audio context after getUserMedia is called
                sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                the sampleRate defaults to the one set in your OS for your playback device

            */
            audioContext = new AudioContext();

            /*  assign to gumStream for later use  */
            gumStream = stream;

            /* use the stream */
            input = audioContext.createMediaStreamSource(stream);

            /*
                Create the Recorder object and configure to record mono sound (1 channel)
                Recording 2 channels  will double the file size
            */
            rec = new Recorder(input, { numChannels: 1 })

            //start the recording process
            rec.record();

        }).catch(function (err) {
        });
    }

    function stopRecording() {

        //tell the recorder to stop the recording
        rec.stop();

        //stop microphone access
        gumStream.getAudioTracks()[0].stop();

        //create the wav blob and pass it on to createDownloadLink
        rec.exportWAV(createDownloadLink);
    }

    function createDownloadLink(blob) {
        var reader = new window.FileReader();
        reader.readAsDataURL(blob);

        reader.onloadend = function () {
            base64 = reader.result;
            console.log('reader.result: ', reader.result);
            base64 = base64.split(',')[1];
            console.log('base64 wav: ', base64);

            $.ajax({
                type: "POST",
                url: askAudioQuestionsApiUrl,
                dataType: "json",
                data: { base64Question: base64 },
                success: function (data) {
                    console.log("data: ", data);
                    var message = "";

                    if (data.Text !== null || data.Error !== null) {

                        if (data.Text !== null) {
                            message = data.Text;
                            //openModalPopUp(false, data.Text);
                            $(inputTextId).val(message);
                            showHideAudioAndTextInputButton($("#userQuestionTextBox").val());
                        }

                        if (data.Error !== null) {
                            message = data.Error;
                            openModalPopUp(true, message);
                        }
                    } else {
                        var response = "<div class='message left'><div class='message-content'>" + message + "</div></div>";
                        $('#message-list').append(response.replace(/\n/g, "<br>"));
                        $("#userQuestionTextBox").val('');
                    }
                },
                failure: function (data) {
                }
            });
        }
    }


    function renderError(message) {
        toastMessagePopup(message);
    }

    function NewSessionActive(status) {
        const recordVoice = document.getElementById('record-voice');
        const messageList = document.getElementById('message-list');
        if (status) {
            $(recordVoice).show();
            $(messageList).hide();
        }
        else {
            $(recordVoice).hide();
            $(messageList).show();
        }
    }
</script>

